generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authenticationId String?           @db.Uuid
  name             String
  email            String            @unique
  lastName         String            @db.VarChar(255)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Authentications  authentications[]
}

model authentications {
  id                      String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountsId              String                     @db.Uuid
  Accounts                accounts                   @relation(fields: [accountsId], references: [id])
  sessionsNumber          Int                        @default(1)
  password                String
  failedAttempts          Int                        @default(0)
  locked                  Boolean                    @default(false)
  status                  authentication_status_enum @default(OFFLINE)
  active                  Boolean                    @default(true)
  authentication__session authentication__session[]
  AuthGroups              auth_groups                @relation(fields: [auth_groupsId], references: [id])
  auth_groupsId           String                     @db.Uuid
}

enum authentication_status_enum {
  ONLINE
  OFFLINE
  LOCKED
  INACTIVE
}

model authentication__session {
  Authentications  authentications @relation(fields: [authenticationId], references: [id])
  authenticationId String          @db.Uuid
  Sessions         sessions        @relation(fields: [sessionId], references: [id])
  sessionId        String          @db.Uuid

  @@id([authenticationId, sessionId])
}

model sessions {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ip                      String
  device                  String
  active                  Boolean
  createdAt               DateTime                  @default(now())
  expiresAt               DateTime
  authentication__session authentication__session[]
}

model auth_groups {
  id                     String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                  String
  createdAt              DateTime                   @default(now())
  active                 Boolean
  AuthGroups_Permissions auth_groups__permissions[]
  Authentications        authentications[]
}

model auth_groups__permissions {
  AuthGroups    auth_groups @relation(fields: [authGroupId], references: [id])
  authGroupId   String      @db.Uuid
  Permissions   permissions @relation(fields: [permissionsId], references: [name])
  permissionsId String

  @@id([authGroupId, permissionsId])
}

model permissions {
  name                   String                     @id
  action                 String[]
  AuthGroups_Permissions auth_groups__permissions[]
}
